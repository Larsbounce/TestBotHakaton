from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from keyboards import kb_main,kb_self_1,kb_self_2,kb_self_3,kb_self_4
from handlers import other as oth
from aiogram.dispatcher import FSMContext

count = 0

async def start(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç',reply_markup=kb_main)


async def math_start(message: types.Message):
        await oth.FSMath.percent.set()
        await message.reply('1. –°–æ—Ç–∞—è —á–∞—Å—Ç—å —á–∏—Å–ª–∞?')

async def math_percent(message: types.Message,state: FSMContext):
        async with state.proxy() as data:
            data['percent'] = message.text.lower()
        await oth.FSMath.next()
        await message.reply('2. –ß—Ç–æ –ª–µ–≥—á–µ: 1 –∫–≥ –≤–∞—Ç—ã –∏–ª–∏ 1 –∫–≥ –∂–µ–ª–µ–∑–∞?')

async def weight(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['weight'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('3. –ú–æ–∂–µ—Ç –ª–∏ –ø—Ä–∏ —É–º–Ω–æ–∂–µ–Ω–∏–∏ –ø–æ–ª—É—á–∏—Ç—å—Å—è –Ω–æ–ª—å?')



async def multiply_zero( message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['multiply_zero'] = message.text.lower()
        await oth.FSMath.next()
        await message.reply('4. –ß–µ–º—É —Ä–∞–≤–Ω–∞ —á–µ—Ç–≤–µ—Ä—Ç—å —á–∞—Å–∞?')

async def quater_hour(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            data['quater_hour'] = message.text.lower()
        await oth.FSMath.next()
        await message.reply('5. –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—å—ë–º–∞ –Ω–µ—Ñ—Ç–∏?')

async def math_barrel(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['barrel'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('6. –ü–µ—Ä–≤–∞—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —Ç–æ—á–∫–∏ ? ')
async def math_absc(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['absc'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('7. –ù–∞—É–∫–∞ –∏–∑—É—á–∞—é—â–∞—è —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ ? ')

async def math_planemetriya(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['planemetriya'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('8. –ü—Ä–∏–±–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–≥–ª–æ–≤ ?')

async def math_transportir(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['transportir'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('''9. –£—á—ë–Ω—ã–π, –Ω–∞–∏–±–æ–ª–µ–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º 
                        –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∞–ª–æ ¬´—Ä–µ—à–µ—Ç–æ¬ª –¥–ª—è –æ—Ç—Å–µ–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª?''')
async def math_eratosthenes(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['eratosthenes'] = message.text.lower()
    await oth.FSMath.next()
    await message.reply('10. –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —Ç—Ä–µ–±—É—é—â–µ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞?')
async def math_teorema(message: types.Message, state: FSMContext):
    count = 0
    res = 0
    async with state.proxy() as data:
        data['teorema'] = message.text.lower()
        for i in data.keys():
            if data[i] == '–ø—Ä–æ—Ü–µ–Ω—Ç' or data[i] == '–æ–¥–∏–Ω–∞–∫–æ–≤–æ' or data[i] == '–¥–∞' or data[i] == '15 –º–∏–Ω.' or data[i] == '–ë–∞—Ä—Ä–µ–ª—å' or data[i] == '–∞–±—Å—Ü–∏—Å—Å–∞' or data[i] == '–ø–ª–∞–Ω–∏–º–µ—Ç—Ä–∏—è' or data[i] == '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∏—Ä' or data[i] == '—ç—Ä–∞—Ç–æ—Å—Ñ–µ–Ω' or data[i] == '—Ç–µ–æ—Ä–µ–º–∞':
                count += 1
    res = count * 10
    await state.finish()
    await message.reply(f'–¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –Ω–∞ {res}%')




async def self(message: types.Message):
    await oth.FSSelf.holidays.set()
    await message.reply(' –í—ã —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –∏–∑–º–æ—Ç–∞–Ω—ã, –Ω–µ–¥–µ–ª—è –±—ã–ª–∞ –¥–æ–ª–≥–æ–π –∏ –Ω–µ —Å–∞–º–æ–π —É–¥–∞—á–Ω–æ–π. –ö–∞–∫ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—ã—Ö–æ–¥–Ω—ã–µ?',reply_markup=kb_self_1)
async def self_holidays(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        print(message.text)
        data['holidays'] = str(message.text)[0]

    await oth.FSSelf.next()
    await message.reply('–ö–∞–∫–æ–µ –∏–∑ –¥–≤—É—Ö –æ–ø–∏—Å–∞–Ω–∏–π –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –≤–∞–º?',reply_markup=kb_self_2)

async def one_or_two(message: types.Message,state: FSMContext):
    async with state.proxy() as data:
        data['one_or_two'] = message.text[0]
    await oth.FSSelf.next()
    await message.reply('–ö–æ–º–ø–∞–Ω–∏—è - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∞—Å –ø–µ—Ä–µ–º–∞–Ω–∏—Ç—å. –í—ã —Å–æ–º–Ω–µ–≤–∞–µ—Ç–µ—Å—å: —Ç–∞–º –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –ø–ª–∞—Ç—è—Ç,–Ω–æ –∑–¥–µ—Å—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤, –¥–∞ –∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –Ω–∞–º–µ–∫–Ω—É–ª, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –≤–∞—Å —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É –ø–µ—Ä–µ–¥ —É—Ö–æ–¥–æ–º –Ω–∞ –ø–µ–Ω—Å–∏—é. –ö–∞–∫ –±—É–¥–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ?',reply_markup=kb_self_3)

async def company(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['company'] = message.text[0]
    await oth.FSSelf.next()
    await message.reply('–î–æ —Å–≤–∞–¥—å–±—ã –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö –¥—Ä—É–∑–µ–π 2 –Ω–µ–¥–µ–ª–∏. –ö–∞–∫ –¥–µ–ª–∞ —Å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π?',reply_markup=kb_self_4)

async def mary(message: types.Message, state: FSMContext):

    async with state.proxy() as data:
        data['mary'] = message.text[0]
        count = ''
        ls = []
        for i in data.keys():
            ls.append(data[i])
        count = ls[0] + ls[1] + ls[2] + ls[3]

        if count == 'ESTJ':
            await message.reply('–¢—ã –£–ü–†–ê–í–õ–ï–ù–ï–¶',reply_markup=kb_main)
        if count == 'ENTJ':
            await message.reply('–¢—ã –ö–û–ú–ê–ù–î–ò–†',reply_markup=kb_main)
        if count == 'ESFJ':
            await message.reply('–¢—ã –£–ß–ò–¢–ï–õ–¨',reply_markup=kb_main)
        if count == 'ESTP':
            await message.reply('–¢—ã –ú–ê–†–®–ê–õ',reply_markup=kb_main)
        if count == 'ENFJ':
            await message.reply('–¢—ã –ù–ê–°–¢–ê–í–ù–ò–ö',reply_markup=kb_main)
        if count == 'ENTP':
            await message.reply('–¢—ã –ò–ó–û–ë–†–ï–¢–ê–¢–ï–õ–¨',reply_markup=kb_main)
        if count == 'ESFP':
            await message.reply('–¢—ã –ü–û–õ–ò–¢–ò–ö',reply_markup=kb_main)
        if count == 'ENFP':
            await message.reply('–¢—ã –ß–ï–ú–ü–ò–û–ù',reply_markup=kb_main)
        if count == 'INFP':
            await message.reply('–¢—ã –¶–ï–õ–ò–¢–ï–õ–¨',reply_markup=kb_main)
        if count == 'ISFP':
            await message.reply('–¢—ã –ö–û–ú–ü–û–ó–ò–¢–û–†',reply_markup=kb_main)
        if count == 'INTP':
            await message.reply('–¢—ã –ê–†–•–ò–¢–ï–ö–¢–û–†',reply_markup=kb_main)
        if count == 'INFJ':
            await message.reply('–¢—ã –°–û–í–ï–¢–ù–ò–ö',reply_markup=kb_main)
        if count == 'INTJ':
            await message.reply('–¢—ã –í–î–û–•–ù–û–í–ò–¢–ï–õ–¨',reply_markup=kb_main)
        if count == 'ISFJ':
            await message.reply('–¢—ã –ó–ê–©–ò–¢–ù–ò–ö',reply_markup=kb_main)
        if count == 'ISTP':
            await message.reply('–¢—ã –£–ú–ï–õ–ï–¶',reply_markup=kb_main)
        if count == 'ISTJ':
            await message.reply('–¢—ã –ò–ù–°–ü–ï–ö–¢–û–†',reply_markup=kb_main)
    await state.finish()










def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start, commands=['start','üëç'])
    dp.register_message_handler(math_start, Text(equals='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', ignore_case=True),state=None)
    dp.register_message_handler(math_percent, state=oth.FSMath.percent)
    dp.register_message_handler(weight,state=oth.FSMath.mass)
    dp.register_message_handler(multiply_zero,state = oth.FSMath.multiplicate)
    dp.register_message_handler(quater_hour,state=oth.FSMath.hour)
    dp.register_message_handler(math_barrel,state=oth.FSMath.barrel)
    dp.register_message_handler(math_absc,state=oth.FSMath.abscis)
    dp.register_message_handler(math_planemetriya,state=oth.FSMath.planimetry)
    dp.register_message_handler(math_transportir,state=oth.FSMath.protractor)
    dp.register_message_handler(math_eratosthenes,state=oth.FSMath.eratosthenes)
    dp.register_message_handler(math_teorema,state=oth.FSMath.theorem)
    dp.register_message_handler(self,Text(equals='–¢–µ—Å—Ç –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å',ignore_case=True),state=None)
    dp.register_message_handler(self_holidays,state=oth.FSSelf.holidays)
    dp.register_message_handler(company,state=oth.FSSelf.company)
    dp.register_message_handler(one_or_two,state=oth.FSSelf.one_or_two)
    dp.register_message_handler(mary,state=oth.FSSelf.marry)